---
profile::application::openssl::manage_ca_cert: true
profile::application::openssl::certs:
  "core.%{hiera('domain_public')}":
    cn:     "core.%{hiera('domain_public')}"
    altnames:
      - "core.%{hiera('domain_public')}"
    concat: true

profile::firewall::rules::custom_rules:
  # '451 haproxy http for public vip1':
  #   proto:        'tcp'
  #   dport:        [ '80', '443' ]
  #   source:
  #     - '129.177.0.0/16' #uib
  #     - '34.99.46.95/32' #pwc
  #   destination:  "%{hiera('corosync_cluster_vip1')}"
  # '452 haproxy http for public vip2':
  #   proto:        'tcp'
  #   dport:        [ '80', '443' ]
  #   source:
  #     - '129.177.0.0/16' #uib
  #     - '34.99.46.95/32' #pwc
  #   destination:  "%{hiera('corosync_cluster_vip2')}"
  '453 haproxy http for internal vip3':
    proto:        'tcp'
    dport:        [ '80', '443' ]
    source:
      - '0.0.0.0/0' #core
    destination:  "%{hiera('corosync_cluster_vip4')}"
  '454 haproxy http for uib ldap vip4':
    proto:        'tcp'
    dport:        [ '636' ]
    source:
      - '0.0.0.0/0' #core
    destination:  "%{hiera('corosync_cluster_vip4')}"
  '455 haproxy status public':
    proto:        'tcp'
    dport:        ['9000']
    source:
      - '129.177.10.0/24'
      - '0.0.0.0/0'
    destination:  '%{::ipaddress_public1}'
  '456 haproxy status mgmt':
    proto:        'tcp'
    dport:        ['9000']
    source:       '0.0.0.0/0'
    destination:  '%{::ipaddress_mgmt1}'

corosync_cluster_node1:   "%{::location}-ha-iamtest-01.%{hiera('domain_mgmt')}"
corosync_cluster_node2:   "%{::location}-ha-iamtest-02.%{hiera('domain_mgmt')}"

ssl_cert_core:          "core.%{hiera('domain_public')}.pem"
ssl_cert_connect:       "core.%{hiera('domain_public')}.pem"
ssl_cert_uib:           "core.%{hiera('domain_public')}.pem"

profile::highavailability::loadbalancing::haproxy::haproxy_balancermembers:
  'ssl-https-connect':
    listening_service:  'ssl-https-connect'
    ports:              443
    server_names:       ['t1-iam-connect-01', 't2-iam-connect-01']
    ipaddresses:        ['192.168.0.250', '192.168.0.250']
    options:            'verify none inter 120 check ssl'
  'ssl-https-core':
    listening_service:  'ssl-https-core'
    ports:              443
    server_names:       ['t1-iam-coreportal-01', 't2-iam-coreportal-01']
    ipaddresses:        ['192.168.0.250', '192.168.0.250']
    options:            'verify none inter 120 check ssl'
  'ssl-https-uib':
    listening_service:  'ssl-https-uib'
    ports:              443
    server_names:       ['t1-iam-uibportal-01', 't2-iam-uibportal-01']
    ipaddresses:        ['192.168.0.250', '192.168.0.250']
    options:            'verify none inter 120 check ssl'
  'uib-ldap':
    listening_service:  'uib-ldap'
    ports:              '636'
    server_names:       ['t1-iam-uibldap-01', 't2-iam-uibldap-01']
    ipaddresses:        ['192.168.23.139','192.168.23.140']
    options:
      - 'check'

#
# COPY OF PROD IAM SETUP
#
profile::highavailability::loadbalancing::haproxy::haproxy_mapfile:
  ssl_https_domains:
    ensure: present
    mappings:
      - 'connect.iam-test.uninett.no':                  'ssl-https-connect'
      - 'iam-test.uninett.no':                          'ssl-https-core'
      - 'tilgang.test.uib.no':                          'ssl-https-uib'
  ssl_http_domains:
    ensure: present
    mappings:
      - 'connect.iam-test.uninett.no':                  'ssl-http-connect'
      - 'iam.test-uninett.no':                          'ssl-http-core'
      - 'tilgang.test.uib.no':                          'ssl-http-uib'

profile::highavailability::loadbalancing::haproxy::haproxy_backends:
  ssl-https-connect:
    mode:             'http'
    options:
      - balance:      'leastconn'
      - option:
        - 'forwardfor except 127.0.0.1'
      - http-check: 'expect status 200'
  ssl-http-connect:
    mode:             'http'
    options:
      - balance:      'roundrobin'
      - redirect:     'scheme https if !{ ssl_fc }'
  ssl-https-core:
    mode:             'http'
    options:
      - balance:      'leastconn'
      - option:
        - 'forwardfor except 127.0.0.1'
      - http-check: 'expect status 200'
  ssl-http-core:
    mode:             'http'
    options:
      - balance:      'roundrobin'
      - redirect:     'scheme https if !{ ssl_fc }'
  ssl-https-uib:
    mode:             'http'
    options:
      - balance:      'leastconn'
      - option:
        - 'forwardfor except 127.0.0.1'
      - http-check: 'expect status 200'
  ssl-http-uib:
    mode:             'http'
    options:
      - balance:      'roundrobin'
      - redirect:     'scheme https if !{ ssl_fc }'
  uib-ldap:
    mode:             'tcp'
    options:
      - balance:      'leastconn'

profile::highavailability::loadbalancing::haproxy::haproxy_frontends:
  ssl-http: #for redirect
    mode:               'http'
    bind:
      "%{hiera('corosync_cluster_vip1')}:80": []
      "%{hiera('corosync_cluster_vip2')}:80": []
      "%{hiera('corosync_cluster_vip3')}:80": []
    options:
      - option:         'httplog'
      - use_backend:    '%[req.hdr(host),lower,map(/etc/haproxy/ssl_http_domains.map)]'
      - capture:        'request header Host len 32' #for debug
  ssl-https:
    mode:               'http'
    bind:
      "%{hiera('corosync_cluster_vip1')}:443":
        - 'ssl'
        - 'crt'
        - "%{hiera('ssl_cert_core')}"
        - 'ssl'
        - 'crt'
        - "%{hiera('ssl_cert_connect')}"
        - 'ssl'
        - 'crt'
        - "%{hiera('ssl_cert_uib')}"
      "%{hiera('corosync_cluster_vip2')}:443":
        - 'ssl'
        - 'crt'
        - "%{hiera('ssl_cert_core')}"
        # - 'ssl'
        - 'crt'
        - "%{hiera('ssl_cert_connect')}"
        - 'ssl'
        - 'crt'
        - "%{hiera('ssl_cert_uib')}"
      "%{hiera('corosync_cluster_vip3')}:443":
        - 'ssl'
        - 'crt'
        - "%{hiera('ssl_cert_core')}"
        # - 'ssl'
        - 'crt'
        - "%{hiera('ssl_cert_connect')}"
        - 'ssl'
        - 'crt'
        - "%{hiera('ssl_cert_uib')}"
    options:
      - use_backend:    '%[req.hdr(host),lower,map(/etc/haproxy/ssl_https_domains.map)]'
      # Prevents X-Forwarded-For spoofing
      - http-request:   'del-header ^X-Forwarded-For:.*'
  uib-ldap:
    mode:               'tcp'
    bind:
      "%{hiera('corosync_cluster_vip4')}:636": []
    options:
      - option:         'tcplog'
      - use_backend:    'uib-ldap'

# Corosync VIP and HAproxy
profile::highavailability::corosync::primitives:
  'iamip1':
    'primitive_class':    'ocf'
    'primitive_type':     'IPaddr2'
    'provided_by':        'heartbeat'
    'parameters':
      'ip':               "%{hiera('corosync_cluster_vip1')}"
      'cidr_netmask':     '25'
    operations:
      'monitor':          { 'interval': '10s', 'timeout': '20s' }
      'start':            { 'interval': '0s', 'timeout': '20s' }
      'stop':             { 'interval': '0s', 'timeout': '20s' }
  'iamip2':
    'primitive_class':    'ocf'
    'primitive_type':     'IPaddr2'
    'provided_by':        'heartbeat'
    'parameters':
      'ip':               "%{hiera('corosync_cluster_vip2')}"
      'cidr_netmask':     '25'
    operations:
      'monitor':          { "interval": "10s", "timeout": "20s" }
      'start':            { "interval": "0s", "timeout": "20s" }
      'stop':             { "interval": "0s", "timeout": "20s" }
  'iamcore':
    'primitive_class':    'ocf'
    'primitive_type':     'IPaddr2'
    'provided_by':        'heartbeat'
    'parameters':
      'ip':               "%{hiera('corosync_cluster_vip3')}"
      'cidr_netmask':     '25'
    operations:
      'monitor':          { "interval": "10s", "timeout": "20s" }
      'start':            { "interval": "0s", "timeout": "20s" }
      'stop':             { "interval": "0s", "timeout": "20s" }
  'uibldap':
    'primitive_class':    'ocf'
    'primitive_type':     'IPaddr2'
    'provided_by':        'heartbeat'
    'parameters':
      'ip':               "%{hiera('corosync_cluster_vip4')}"
      'cidr_netmask':     '25'
    operations:
      'monitor':          { "interval": "10s", "timeout": "20s" }
      'start':            { "interval": "0s", "timeout": "20s" }
      'stop':             { "interval": "0s", "timeout": "20s" }
  'haproxy':
    'primitive_class':    'systemd'
    'primitive_type':     'haproxy'
    'operations':
      'monitor':          { 'interval': '5s', 'timeout': '20s' }
      'start':            { 'interval': '0s', 'timeout': '20s' }
      'stop':             { 'interval': '0s', 'timeout': '20s' }

profile::highavailability::corosync::locations:
  'iamip_location1':
    primitive:  'iamip1'
    node_name:  "%{hiera('corosync_cluster_node1')}"
    score:      'INFINITY'
  'iamip_location2':
    primitive:  'iamip2'
    node_name:  "%{hiera('corosync_cluster_node2')}"
    score:      'INFINITY'
  'iamcore_location':
    primitive:  'iamcore'
    node_name:  "%{hiera('corosync_cluster_node1')}"
    score:      'INFINITY'
  'uibldap_location':
    primitive:  'uibldap'
    node_name:  "%{hiera('corosync_cluster_node1')}"
    score:      'INFINITY'

profile::highavailability::corosync::colocations:
  'iamip1_haproxy':
    primitives:   ['clone_haproxy', 'iamip1']
  'iamip2_haproxy':
    primitives:   ['clone_haproxy', 'iamip2']
  'iamcore_haproxy':
    primitives:   ['clone_haproxy', 'iamcore']
  'uibldap_haproxy':
    primitives:   ['clone_haproxy', 'uibldap']
