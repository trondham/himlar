---
include:
  default:
    - profile::application::openssl

profile::application::openssl::manage_ca_cert: true
profile::application::openssl::certs:
  "apps.%{hiera('domain_public')}":
    cn:     "apps.%{hiera('domain_public')}"
    altnames:
      - "apps.%{hiera('domain_public')}"
    concat: true

ssl_cert_apps:          "apps.%{hiera('domain_public')}.pem"
ssl_cert_nrec_docs:     "apps.%{hiera('domain_public')}.pem"
ssl_cert_nrec_www:      "apps.%{hiera('domain_public')}.pem"
ssl_cert_nrec:          "apps.%{hiera('domain_public')}.pem"

#netdata
profile::monitoring::netdata::firewall_source:
  - '0.0.0.0/0'

# corosync
corosync::unicast_addresses:
  - "%{hiera('netcfg_public_netpart')}.16"
  - "%{hiera('netcfg_public_netpart')}.17"

corosync::quorum_members:
  - "%{hiera('netcfg_public_netpart')}.16"
  - "%{hiera('netcfg_public_netpart')}.17"

corosync_cluster_node1:   "%{::location}-ha-01.%{hiera('domain_mgmt')}"
corosync_cluster_node2:   "%{::location}-ha-02.%{hiera('domain_mgmt')}"

corosync_cluster_vip1:    "%{hiera('netcfg_public_netpart')}.6"
corosync_cluster_vip2:    "%{hiera('netcfg_public_netpart')}.7"
corosync_cluster_vip3:    "%{hiera('netcfg_public_netpart')}.8"
corosync_cluster_vip4:    "%{hiera('netcfg_public_netpart')}.9"
corosync_cluster_vip5:    "%{hiera('netcfg_public_netpart')}.10"
corosync_cluster_vip6:    "%{hiera('netcfg_public_netpart')}.11"

# Firewall rules full access to everything!
profile::firewall::rules::custom_rules:
  '451 haproxy http':
    proto:        'tcp'
    dport:        [ '80', '443' ]
    source:       '0.0.0.0/0'
  '452 haproxy ldap':
    proto:        'tcp'
    dport:        [ '636', '389' ]
    source:       '0.0.0.0/0'
  '455 haproxy status public':
    proto:        'tcp'
    dport:        ['9000']
    source:       '0.0.0.0/0'
    destination: '%{::ipaddress_public1}'
  '456 haproxy status mgmt':
    proto:        'tcp'
    dport:        ['9000']
    source:       '0.0.0.0/0'
    destination:  '%{::ipaddress_mgmt1}'

# HAproxy
haproxy::global_options:
  log:          '127.0.0.1 local6 debug alert'
  maxconn:      '10000' # total connections per core
  crt-base:     '/etc/pki/tls/certs'

haproxy::defaults_options:
  log:          'global'
  stats:        []
  option:       ['dontlognull', 'httplog', 'http-server-close', 'redispatch']
  maxconn:      '2000' # default per frontend
  timeout:
    - 'connect 10s'
    - 'http-keep-alive 10s'
    - 'check 10s'
    - 'http-request 10s'
    - 'client 30s'
    - 'server 30s'
    - 'queue 30s'

# Allow ports in selinux|
profile::base::selinux::ports:
  sfb-https:
    seltype:  'http_port_t'
    protocol: 'tcp'
    port:     4443
  ldaps:
    seltype:  'http_port_t'
    protocol: 'tcp'
    port:     636
  ldap:
    seltype:  'http_port_t'
    protocol: 'tcp'
    port:     389

# Access lists
profile::highavailability::loadbalancing::haproxy::access_list:
  uib_vpn_net:
    ips:
      - 129.177.138.114/32 # uib-guest
      - 129.177.44.0/24 # vpn-gw
      - 129.177.46.0/24 # vpn-gw
      - 129.177.32.0/24 # vpn-ansatt
      - 129.177.33.0/24 # vpn-ansatt
      - 129.177.48.0/24 # vpn-student
      - 129.177.49.0/24 # vpn-student
      - 129.177.94.64/26 # vpn
      - 129.177.144.0/23 # new vpn
      - 129.177.13.203/32 # login

profile::highavailability::loadbalancing::haproxy::haproxy_mapfile:
  uib_https_domains:
    ensure: present
    mappings:
      - 'exch.uib.no':                            'uib-https-exch'
      - 'portal.uib.no':                          'uib-https-adm'
  uib_http_domains:
    ensure: present
    mappings:
      - 'portal.uib.no':                          'uib-http-adm'
  public_https_domains:
    ensure: present
    mappings:
      - 'report.uh-iaas.no':                      'public-https-uh-report'
      - 'status.uh-iaas.no':                      'public-https-uh-status'
      - 'apps.vagrant.iaas.intern':               'public-https-apps-test'
  public_http_domains:
    ensure: present
    mappings:
      - 'report.uh-iaas.no':                      'public-https-uh-report'
      - 'status.uh-iaas.no':                      'public-https-uh-status'
  ssl_https_domains:
    ensure: present
    mappings:
      - 'apps.uib.no':                            'ssl-https-apps'
      - 'appsanywhere.uib.no':                    'ssl-https-apps'
  ssl_http_domains:
    ensure: present
    mappings:
      - 'apps.uib.no':                            'ssl-http-apps'
      - 'appsanywhere.uib.no':                    'ssl-http-apps'

profile::highavailability::loadbalancing::haproxy::haproxy_balancermembers:
  'public-https-uh-status':
    listening_service:  'public-https-uh-status'
    ports:              443
    server_names:       ['status-osl', 'status-bgo']
    ipaddresses:        ['158.37.63.250', '158.39.77.250']
    options:            'verify none inter 1000 check check-ssl'
  'public-https-uh-report':
    listening_service:  'public-https-uh-report'
    ports:              443
    server_names:       ['report-osl', 'report-bgo']
    ipaddresses:        ['158.37.63.250', '158.39.77.250']
    options:            'verify none inter 1000 check check-ssl'
  'public-https-apps':
    listening_service:  'public-https-apps'
    ports:              443
    server_names:       ['appsanywhere01.uib.no', 'appsanywhere02.uib.no']
    ipaddresses:        ['129.177.30.211', '129.177.30.229']
    options:
      - 'check'
  'ssl-https-apps':
    listening_service:  'ssl-https-apps'
    ports:              443
    server_names:       ['appsanywhere05.uib.no', 'appsanywhere06.uib.no']
    ipaddresses:        ['129.177.150.205', '129.177.150.206']
    options:            'verify none inter 120 check check-ssl ssl'
  'uib-https-apps-gw':
    listening_service:  'uib-https-apps-gw'
    ports:              443
    server_names:       ['apps-gw01.uib.no', 'apps-gw02.uib.no']
    ipaddresses:        ['129.177.14.98', '129.177.14.152']
    options:
      - 'check'
  'uib-https-apps-admin':
    listening_service:  'uib-https-apps-admin'
    ports:              443
    server_names:       ['apps-admin01.uib.no', 'apps-admin02.uib.no']
    ipaddresses:        ['129.177.14.170', '129.177.14.171']
    options:
      - 'check'
  'public-https-apps-test':
    listening_service:  'public-https-apps-test'
    ports:              443
    # server_names:       ['status-osl.uh-iaas.no', 'status-bgo.uh-iaas.no']
    # ipaddresses:        ['158.37.63.250', '158.39.77.250']
    server_names:       ['apps-test01.uib.no']
    ipaddresses:        ['129.177.30.203']
#    define_cookies:     true
    options:            'verify none inter 1000 check check-ssl ssl'

#   'public-ldap-prod':
#     listening_service:  'public-ldap-prod'
#     ports:              '389'
#     server_names:       ['p1ldap01.uib.no', 'p2ldap01.uib.no', 'p1ldap02.uib.no', 'p2ldap02.uib.no']
#     ipaddresses:        ['129.177.5.229', '129.177.5.230', '129.177.5.234', '129.177.5.236']
#     options:
#       - 'check'
#   'public-ldaps-prod':
#     listening_service:  'public-ldaps-prod'
#     ports:              '636'
#     server_names:       ['p1ldap01.uib.no', 'p2ldap01.uib.no', 'p1ldap02.uib.no', 'p2ldap02.uib.no']
#     ipaddresses:        ['129.177.5.229', '129.177.5.230', '129.177.5.234', '129.177.5.236']
#     options:
#       - 'check'
#   'uib-https-exch':
#     listening_service:  'uib-https-exch'
#     ports:              443
#     server_names:       ['exchange01.uib.no', 'exchange02.uib.no']
#     ipaddresses:        ['129.177.14.178','129.177.14.179']
#     options:            'check'
#   'uib-https-adm':
#     listening_service:  'uib-https-adm'
#     ports:              443
#     server_names:       ['rd-web01.uib.no', 'rd-web02.uib.no']
#     ipaddresses:        ['129.177.14.13', '129.177.14.182']
#     options:
#       - 'check'
#   'uib-http-adm':
#     listening_service:  'uib-http-adm'
#     ports:              80
#     server_names:       ['rd-web01.uib.no', 'rd-web02.uib.no']
#     ipaddresses:        ['129.177.14.13', '129.177.14.182']
#     options:
#       - 'check'
#   'uib-ldap-test':
#     listening_service:  'uib-ldap-test'
#     ports:              '389'
#     server_names:       ['t1ldap01.uib.no']
#     ipaddresses:        ['129.177.5.183']
#     options:
#       - 'check'
#   'uib-ldaps-test':
#     listening_service:  'uib-ldaps-test'
#     ports:              '636'
#     server_names:       ['t1ldap01.uib.no']
#     ipaddresses:        ['129.177.5.183']
#     options:
#       - 'check'
#
profile::highavailability::loadbalancing::haproxy::haproxy_backends:
  ssl-https-apps:
    mode:             'http'
    options:
      - balance:      'leastconn'
      - option:
        - 'forwardfor except 127.0.0.1'
        - 'httpchk GET /healthcheck'
      - http-check: 'expect status 200'
      # Session stick table and based on source IP
      - stick-table: 'type ip size 1m expire 1h'
      - stick: 'on src'
      - timeout:
        - 'server 1m'
        - 'queue 1m'

  ssl-http-apps:
    mode:             'http'
    options:
      - balance:      'roundrobin'
      - redirect:     'scheme https if !{ ssl_fc }'
  public-https-apps-test:
    mode:             'http'
    options:
      - balance:      'source'
      # - option:
      #   - 'httpchk HEAD /api/health HTTP/1.1\r\nHost:\ status.uh-iaas.no'
      # - option:
      #   - 'forwardfor except 127.0.0.1'
#        - 'http-server-close'
        #- 'httpchk HEAD /jukeboxserver/do/license/token/renew.tok?msid=ping HTTP/1.1\r\nHost:\ apps-admin.uib.no'
#      - cookie:       'ASP.NET_SessionId prefix nocache'
  public-http-apps:
    mode:             'tcp'
    options:
      - balance:      'source'
      #- option:
      #  - 'forwardfor except 127.0.0.1'
      # - option:
      #   - 'httpchk HEAD /jukeboxserver/do/license/token/renew.tok?msid=ping HTTP/1.1\r\nHost:\ apps-admin.uib.no'
  public-http-uh-status:
    mode:             'http'
    options:
      - balance:      'roundrobin'
      - redirect:     'scheme https if !{ ssl_fc }'
  public-https-uh-status:
    mode:             'tcp'
    options:
      - balance:      'source'
      - option:
        - 'httpchk HEAD /api/health HTTP/1.1\r\nHost:\ status.uh-iaas.no'
  public-http-uh-report:
    mode:             'http'
    options:
      - balance:      'roundrobin'
      - redirect:     'scheme https if !{ ssl_fc }'
  public-https-uh-report:
    mode:             'tcp'
    options:
      - balance:      'source'
      - acl:          'instance-api url_beg /api/v1/instance'
      - tcp-request:  'content reject if instance-api'
      #- tcp-request:  'content reject if !{ src -f /etc/haproxy/uhiaas-report.list }'
      - option:
        - 'httpchk HEAD /health HTTP/1.1\r\nHost:\ report.uh-iaas.no'
  public-ldap-prod:
    mode:             'tcp'
    options:
      - balance:      'leastconn'
  public-ldaps-prod:
    mode:             'tcp'
    options:
      - balance:      'leastconn'
  uib-https-sfb:
    mode:             'tcp'
    options:
      - balance:      'roundrobin'
      - option:
        - 'httpchk /healthcheck.html'
  uib-http-sfb:
    mode:             'http'
    options:
      - balance:      'roundrobin'
      - option:
        - 'httpchk /healthcheck.html'
  uib-https-exch:
    mode:             'tcp'
    options:
      - balance:      'source'
  uib-https-adm:
    mode:             'tcp'
    options:
      - balance:      'roundrobin'
      - tcp-request:  'content reject if { src -f /etc/haproxy/uib_vpn_net.list }'
  uib-http-adm:
    mode:             'tcp'
    options:
      - balance:      'roundrobin'
      - tcp-request:  'content reject if { src -f /etc/haproxy/uib_vpn_net.list }'
  uib-ldap-test:
    mode:             'tcp'
    options:
      - balance:      'leastconn'
  uib-ldaps-test:
    mode:             'tcp'
    options:
      - balance:      'leastconn'
  uib-https-apps-admin:
    mode:             'tcp'
    options:
      - balance:      'roundrobin'
      # - option:
      #   - 'httpchk HEAD /jukeboxserver/do/license/token/renew.tok?msid=ping HTTP/1.1\r\nHost:\ apps-admin.uib.no'
  uib-https-apps-gw:
    mode:             'tcp'
    options:
      - balance:      'roundrobin'
      #- cookie:       'ASP.NET_SessionId prefix nocache'
      # - option:
      #   - 'httpchk HEAD /jukeboxserver/do/license/token/renew.tok?msid=ping HTTP/1.1\r\nHost:\ apps-admin.uib.no'

#  uib-https-uh-dashboard:
#    mode: 'tcp'
#    options:
#      - balance:      'source'
#      - option:       ['ssl-hello-chk']
#      - stick-table:  'type binary len 32 size 30k expire 30m'
#      - acl:
#        - 'clienthello req_ssl_hello_type 1'
#        - 'serverhello rep_ssl_hello_type 2'
#      - tcp-request:
#        - 'inspect-delay 15s'
#        - 'content reject unless clienthello'
#      - tcp-response:
#        - 'content reject unless serverhello'
#      - stick:
#        - 'on payload_lv(43,1) if clienthello'
#        - 'store-response payload_lv(43,1) if serverhello'

profile::highavailability::loadbalancing::haproxy::haproxy_frontends:
  public-http:
    mode:               'http'
    bind:
      "%{hiera('corosync_cluster_vip1')}:80": []
      "%{hiera('corosync_cluster_vip2')}:80": []
    options:
      - option:         'httplog'
      - use_backend:    '%[req.hdr(host),lower,map(/etc/haproxy/public_http_domains.map)]'
      - capture:        'request header Host len 32' #for debug
  public-https:
    mode:               'tcp'
    bind:
      "%{hiera('corosync_cluster_vip1')}:443": []
      "%{hiera('corosync_cluster_vip2')}:443": []
    options:
      - option:         'tcplog'
      - tcp-request:
        - 'inspect-delay 5s'
        - 'content accept if { req_ssl_hello_type 1 }'
      - use_backend:      '%[req_ssl_sni,lower,map(/etc/haproxy/public_https_domains.map)]'
  public-ldap:
    mode:               'tcp'
    bind:
      "%{hiera('corosync_cluster_vip1')}:389": []
      "%{hiera('corosync_cluster_vip2')}:389": []
    options:
      - option:         'tcplog'
      - use_backend:    'public-ldap-prod'
  public-ldaps:
    mode:               'tcp'
    bind:
      "%{hiera('corosync_cluster_vip1')}:636": []
      "%{hiera('corosync_cluster_vip2')}:636": []
    options:
      - option:         'tcplog'
      - use_backend:    'public-ldaps-prod'
  uib-http:
    mode:               'http'
    bind:
      "%{hiera('corosync_cluster_vip3')}:80": []
      "%{hiera('corosync_cluster_vip4')}:80": []
    options:
      - maxconn:        '16000' # max internal http connections
      - option:         'httplog'
      - use_backend:    '%[req.hdr(host),lower,map(/etc/haproxy/uib_http_domains.map)]'
      - capture:        'request header Host len 32' #for debug
  uib-https:
    mode:               'tcp'
    bind:
      "%{hiera('corosync_cluster_vip3')}:443": []
      "%{hiera('corosync_cluster_vip4')}:443": []
    options:
      - maxconn:        '16000' # max internal https connections
      - option:         'tcplog'
      - tcp-request:
        - 'inspect-delay 5s'
        - 'content accept if { req_ssl_hello_type 1 }'
      - use_backend:      '%[req_ssl_sni,lower,map(/etc/haproxy/uib_https_domains.map)]'
  uib-ldap:
    mode:               'tcp'
    bind:
      "%{hiera('corosync_cluster_vip3')}:389": []
      "%{hiera('corosync_cluster_vip4')}:389": []
    options:
      - option:         'tcplog'
      - use_backend:    'uib-ldap-test'
  uib-ldaps:
    mode:               'tcp'
    bind:
      "%{hiera('corosync_cluster_vip3')}:636": []
      "%{hiera('corosync_cluster_vip4')}:636": []
    options:
      - option:         'tcplog'
      - use_backend:    'uib-ldaps-test'
  public-https-terminate:
    mode:               'http'
    bind:
      "%{hiera('corosync_cluster_vip5')}:443": ['ssl', 'crt', 'apps.vagrant.iaas.intern.pem']
    options:
      - option:         'http-server-close'
      - option:         'forwardfor'
      - use_backend:    '%[req.hdr(host),lower,map(/etc/haproxy/public_https_domains.map)]'
      - http-request:
        - 'add-header X-Forwarded-Proto https if { ssl_fc }'
        - 'set-header X-Forwarded-Port %[dst_port]'
  ssl-http: #for redirect
    mode:               'http'
    bind:
      "%{hiera('corosync_cluster_vip5')}:80": []
      "%{hiera('corosync_cluster_vip6')}:80": []
    options:
      - option:         'httplog'
      - use_backend:    '%[req.hdr(host),lower,map(/etc/haproxy/ssl_http_domains.map)]'
      - capture:        'request header Host len 32' #for debug
  ssl-https:
    mode:               'http'
    bind:
      "%{hiera('corosync_cluster_vip5')}:443":
        - 'ssl'
        - 'crt'
        - "%{hiera('ssl_cert_apps')}"
        - 'ssl'
        - 'crt'
        - "%{hiera('ssl_cert_nrec')}"
        - 'ssl'
        - 'crt'
        - "%{hiera('ssl_cert_nrec_www')}"
        - 'ssl'
        - 'crt'
        - "%{hiera('ssl_cert_nrec_docs')}"
      "%{hiera('corosync_cluster_vip6')}:443":
        - 'ssl'
        - 'crt'
        - "%{hiera('ssl_cert_apps')}"
        - 'ssl'
        - 'crt'
        - "%{hiera('ssl_cert_nrec')}"
        - 'ssl'
        - 'crt'
        - "%{hiera('ssl_cert_nrec_www')}"
        - 'ssl'
        - 'crt'
        - "%{hiera('ssl_cert_nrec_docs')}"
    options:
      - option:         'http-server-close'
      - option:         'forwardfor'
      - use_backend:    '%[req.hdr(host),lower,map(/etc/haproxy/ssl_https_domains.map)]'
      #Prevents X-Forwarded-For spoofing
      - http-request:   'del-header ^X-Forwarded-For:.*'
# Corosync uib
# Corosync VIP and HAproxy
profile::highavailability::corosync::primitives:
  'pubip1':
    'primitive_class':    'ocf'
    'primitive_type':     'IPaddr2'
    'provided_by':        'heartbeat'
    'parameters':
      'ip':               "%{hiera('corosync_cluster_vip1')}"
      'cidr_netmask':     '24'
    operations:
      'monitor':          { 'interval': '10s', 'timeout': '20s' }
      'start':            { 'interval': '0s', 'timeout': '20s' }
      'stop':             { 'interval': '0s', 'timeout': '20s' }
  'pubip2':
    'primitive_class':    'ocf'
    'primitive_type':     'IPaddr2'
    'provided_by':        'heartbeat'
    'parameters':
      'ip':               "%{hiera('corosync_cluster_vip2')}"
      'cidr_netmask':     '24'
    operations:
      'monitor':          { 'interval': '10s', 'timeout': '20s' }
      'start':            { 'interval': '0s', 'timeout': '20s' }
      'stop':             { 'interval': '0s', 'timeout': '20s' }
  'uibip1':
    'primitive_class':    'ocf'
    'primitive_type':     'IPaddr2'
    'provided_by':        'heartbeat'
    'parameters':
      'ip':               "%{hiera('corosync_cluster_vip3')}"
      'cidr_netmask':     '24'
    operations:
      'monitor':          { 'interval': '10s', 'timeout': '20s' }
      'start':            { 'interval': '0s', 'timeout': '20s' }
      'stop':             { 'interval': '0s', 'timeout': '20s' }
  'uibip2':
    'primitive_class':    'ocf'
    'primitive_type':     'IPaddr2'
    'provided_by':        'heartbeat'
    'parameters':
      'ip':               "%{hiera('corosync_cluster_vip4')}"
      'cidr_netmask':     '24'
    operations:
      'monitor':          { "interval": "10s", "timeout": "20s" }
      'start':            { "interval": "0s", "timeout": "20s" }
      'stop':             { "interval": "0s", "timeout": "20s" }
  'sslip1':
    'primitive_class':    'ocf'
    'primitive_type':     'IPaddr2'
    'provided_by':        'heartbeat'
    'parameters':
      'ip':               "%{hiera('corosync_cluster_vip5')}"
      'cidr_netmask':     '24'
    operations:
      'monitor':          { "interval": "10s", "timeout": "20s" }
      'start':            { "interval": "0s", "timeout": "20s" }
      'stop':             { "interval": "0s", "timeout": "20s" }
  'sslip2':
    'primitive_class':    'ocf'
    'primitive_type':     'IPaddr2'
    'provided_by':        'heartbeat'
    'parameters':
      'ip':               "%{hiera('corosync_cluster_vip6')}"
      'cidr_netmask':     '24'
    operations:
      'monitor':          { "interval": "10s", "timeout": "20s" }
      'start':            { "interval": "0s", "timeout": "20s" }
      'stop':             { "interval": "0s", "timeout": "20s" }
  'haproxy':
    'primitive_class':    'systemd'
    'primitive_type':     'haproxy'
    'operations':
      'monitor':          { 'interval': '5s', 'timeout': '20s' }
      'start':            { 'interval': '0s', 'timeout': '20s' }
      'stop':             { 'interval': '0s', 'timeout': '20s' }

profile::highavailability::corosync::locations:
  'pubip_location1':
    primitive:  'pubip1'
    node_name:  "%{hiera('corosync_cluster_node1')}"
    score:      'INFINITY'
  'pubip_location2':
    primitive:  'pubip2'
    node_name:  "%{hiera('corosync_cluster_node2')}"
    score:      'INFINITY'
  'uibip_location1':
    primitive:  'uibip1'
    node_name:  "%{hiera('corosync_cluster_node1')}"
    score:      'INFINITY'
  'uibip_location2':
    primitive:  'uibip2'
    node_name:  "%{hiera('corosync_cluster_node2')}"
    score:      'INFINITY'
  'sslip_location1':
    primitive:  'sslip1'
    node_name:  "%{hiera('corosync_cluster_node1')}"
    score:      'INFINITY'
  'sslip_location2':
    primitive:  'sslip2'
    node_name:  "%{hiera('corosync_cluster_node2')}"
    score:      'INFINITY'


profile::highavailability::corosync::colocations:
  'pubip1_haproxy':
    primitives:   ['clone_haproxy', 'pubip1']
  'pubip2_haproxy':
    primitives:   ['clone_haproxy', 'pubip2']
  'uibip1_haproxy':
    primitives:   ['clone_haproxy', 'uibip1']
  'uibip2_haproxy':
    primitives:   ['clone_haproxy', 'uibip2']
  'sslip1_haproxy':
    primitives:   ['clone_haproxy', 'sslip1']
  'sslip2_haproxy':
    primitives:   ['clone_haproxy', 'sslip2']
