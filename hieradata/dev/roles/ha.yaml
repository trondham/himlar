---
#include:
#  default:
#    - profile::logging::rsyslog::client

# galera
#include:
#  default:
#    - profile::application::openssl
#    - profile::database::galera::arbitrator
#
#profile::database::galera::arbitrator::manage_arbitrator: true
#profile::database::galera::arbitrator::manage_firewall:   true

#profile::application::openssl::manage_ca_cert:            true
#profile::application::openssl::manage_dhparam:            true
#profile::application::openssl::certs:
#  "db.%{hiera('domain_trp')}":
#     cn:             "%{::hostname}.%{hiera('domain_trp')}"
#     concat_dhparam: true
#     altnames:
#       - "%{::hostname}.%{hiera('domain_trp')}"
#       - "db.%{hiera('domain_trp')}"
#
# db_ssl_key:       "/etc/pki/tls/private/db.%{hiera('domain_trp')}.key.pem"
# db_ssl_cert:      "/etc/pki/tls/certs/db.%{hiera('domain_trp')}.pem" # concat dhparam
# db_ssl_ca:        '/etc/pki/tls/certs/cachain.pem'
#
# wsrep_provider_options: "socket.ssl_key=%{hiera('db_ssl_key')};socket.ssl_cert=%{hiera('db_ssl_cert')};socket.ssl_ca=%{hiera('db_ssl_ca')};socket.ssl_cipher=AES128-SHA"
# wsrep_cluster_address:  "%{hiera('netcfg_trp_netpart')}.41:4567,%{hiera('netcfg_trp_netpart')}:4567,%{hiera('corosync_cluster_vip1')}:4567"
#
# # Enable extra yum repo
# profile::base::yumrepo::repo_hash:
#   mariadb:
#     ensure: present

# corosync
corosync::unicast_addresses:
  - "%{hiera('netcfg_public_netpart')}.16"
  - "%{hiera('netcfg_public_netpart')}.17"

corosync::quorum_members:
  - "%{hiera('netcfg_public_netpart')}.16"
  - "%{hiera('netcfg_public_netpart')}.17"

corosync_cluster_node1:   "%{::location}-ha-01.%{hiera('domain_mgmt')}"
corosync_cluster_node2:   "%{::location}-ha-02.%{hiera('domain_mgmt')}"

corosync_cluster_vip1:    "%{hiera('netcfg_public_netpart')}.6"
corosync_cluster_vip2:    "%{hiera('netcfg_public_netpart')}.7"
corosync_cluster_vip3:    "%{hiera('netcfg_public_netpart')}.8"
corosync_cluster_vip4:    "%{hiera('netcfg_public_netpart')}.9"

# Firewall rules full access to everything!
profile::firewall::rules::custom_rules:
  '451 haproxy http':
    proto:        'tcp'
    dport:        [ '80', '443' ]
    source:       '0.0.0.0/0'
  '455 haproxy status':
    proto:        'tcp'
    dport:        ['9000']
    source:       '0.0.0.0/0'

#
# Example with mapping, frontend and backend
#
# Mapping: DNS -> backend
profile::highavailability::loadbalancing::haproxy::haproxy_mapfile:
  'uib_domains':
    ensure: present
    mappings:
      - "%{hiera('public__address__access')}":      'uib-https-uh-access'
      - "%{hiera('public__address__dashboard')}":   'uib-https-uh-dashboard'
  'public_domains':
    ensure: present
    mappings:
      - "%{hiera('public__address__access')}":      'uib-https-uh-access'
      - "%{hiera('public__address__dashboard')}":   'uib-https-uh-dashboard'

# Backends (servers are added with balancermember)
profile::highavailability::loadbalancing::haproxy::haproxy_backends:
  uib-https-uh-access:
    mode: 'tcp'
    options:
      - option:       ['ssl-hello-chk']
      - stick-table:  'type binary len 32 size 30k expire 30m'
      - acl:
        - 'clienthello req_ssl_hello_type 1'
        - 'serverhello rep_ssl_hello_type 2'
      - tcp-request:
        - 'inspect-delay 15s'
        - 'content reject unless clienthello'
      - tcp-response:
        - 'content reject unless serverhello'
      - stick:
        - 'on payload_lv(43,1) if clienthello'
        - 'store-response payload_lv(43,1) if serverhello'
  uib-https-uh-dashboard:
    mode: 'tcp'
    options:
      - option:       ['ssl-hello-chk']
      - stick-table:  'type binary len 32 size 30k expire 30m'
      - acl:
        - 'clienthello req_ssl_hello_type 1'
        - 'serverhello rep_ssl_hello_type 2'
      - tcp-request:
        - 'inspect-delay 15s'
        - 'content reject unless clienthello'
      - tcp-response:
        - 'content reject unless serverhello'
      - stick:
        - 'on payload_lv(43,1) if clienthello'
        - 'store-response payload_lv(43,1) if serverhello'
  uib-https-sfb:
    mode:             'tcp'
    options:
      - balance:      'roundrobin'
      - option:
        - 'httpchk /healthcheck.html'
  uib-http-sfb:
    mode:             'http'
    options:
      - balance:      'roundrobin'
      - option:
        - 'httpchk /healthcheck.html'

# Backend members
profile::highavailability::loadbalancing::haproxy::haproxy_balancermembers:
  'uib-https-uh-access':
    listening_service:  'uib-https-uh-access'
    ports:              443
    server_names:       ['%{::location}-access-01']
    ipaddresses:        ["%{hiera('netcfg_public_netpart')}.56"]
    options:            'check'
  'uib-https-uh-dashboard':
    listening_service:  'uib-https-uh-dashboard'
    ports:              443
    server_names:       ['%{::location}-dashboard-01']
    ipaddresses:        ["%{hiera('netcfg_public_netpart')}.51"]
    options:            'check'
  'uib-https-sfb':
    listening_service:  'uib-https-sfb'
    ports:              443
    server_names:       ['sfb-fe01.uib.no', 'sfb-fe02.uib.no', 'sfb-fe03.uib.no']
    ipaddresses:        ['129.177.14.231','129.177.14.232','129.177.14.233']
    options:
      - 'check'
      - 'port 80'
  'uib-http-sfb':
    listening_service:  'uib-http-sfb'
    ports:              80
    server_names:       ['sfb-fe01.uib.no', 'sfb-fe02.uib.no', 'sfb-fe03.uib.no']
    ipaddresses:        ['129.177.14.231','129.177.14.232','129.177.14.233']
    options:
      - 'check'

# Frontend: backends are found from mapping file
profile::highavailability::loadbalancing::haproxy::haproxy_frontends:
  public-http:
    mode:               'http'
    bind:
      "%{hiera('corosync_cluster_vip1')}:80": []
      "%{hiera('corosync_cluster_vip2')}:80": []
    options:
      - option:         'httplog'
      - use_backend:    '%[req.hdr(host),lower,map(/etc/haproxy/public_domains.map)]'
      - capture:        'request header Host len 32' #for debug
  public-https:
    mode:               'tcp'
    bind:
      "%{hiera('corosync_cluster_vip1')}:443": []
      "%{hiera('corosync_cluster_vip2')}:443": []
    options:
      - option:         'tcplog'
      - tcp-request:
        - 'inspect-delay 5s'
        - 'content accept if { req_ssl_hello_type 1 }'
      - use_backend:      '%[req_ssl_sni,lower,map(/etc/haproxy/public_domains.map)]'
  uib-http:
    mode:               'http'
    bind:
      "%{hiera('corosync_cluster_vip3')}:80": []
      "%{hiera('corosync_cluster_vip4')}:80": []
    options:
      - option:         'httplog'
      - use_backend:    '%[req.hdr(host),lower,map(/etc/haproxy/uib_domains.map)]'
      - capture:        'request header Host len 32' #for debug
  uib-https:
    mode:               'tcp'
    bind:
      "%{hiera('corosync_cluster_vip3')}:443": []
      "%{hiera('corosync_cluster_vip4')}:443": []
    options:
      - option:         'tcplog'
      - tcp-request:
        - 'inspect-delay 5s'
        - 'content accept if { req_ssl_hello_type 1 }'
      - use_backend:      '%[req_ssl_sni,lower,map(/etc/haproxy/uib_domains.map)]'


# Corosync uib
# Corosync VIP and HAproxy
profile::highavailability::corosync::primitives:
  'pubip1':
    'primitive_class':    'ocf'
    'primitive_type':     'IPaddr2'
    'provided_by':        'heartbeat'
    'parameters':
      'ip':               "%{hiera('corosync_cluster_vip1')}"
      'cidr_netmask':     '24'
    operations:
      'monitor':          { 'interval': '10s', 'timeout': '20s' }
      'start':            { 'interval': '0s', 'timeout': '20s' }
      'stop':             { 'interval': '0s', 'timeout': '20s' }
  'pubip2':
    'primitive_class':    'ocf'
    'primitive_type':     'IPaddr2'
    'provided_by':        'heartbeat'
    'parameters':
      'ip':               "%{hiera('corosync_cluster_vip2')}"
      'cidr_netmask':     '24'
    operations:
      'monitor':          { 'interval': '10s', 'timeout': '20s' }
      'start':            { 'interval': '0s', 'timeout': '20s' }
      'stop':             { 'interval': '0s', 'timeout': '20s' }
  'uibip1':
    'primitive_class':    'ocf'
    'primitive_type':     'IPaddr2'
    'provided_by':        'heartbeat'
    'parameters':
      'ip':               "%{hiera('corosync_cluster_vip3')}"
      'cidr_netmask':     '24'
    operations:
      'monitor':          { 'interval': '10s', 'timeout': '20s' }
      'start':            { 'interval': '0s', 'timeout': '20s' }
      'stop':             { 'interval': '0s', 'timeout': '20s' }
  'uibip2':
    'primitive_class':    'ocf'
    'primitive_type':     'IPaddr2'
    'provided_by':        'heartbeat'
    'parameters':
      'ip':               "%{hiera('corosync_cluster_vip4')}"
      'cidr_netmask':     '24'
    operations:
      'monitor':          { "interval": "10s", "timeout": "20s" }
      'start':            { "interval": "0s", "timeout": "20s" }
      'stop':             { "interval": "0s", "timeout": "20s" }
  'haproxy':
    'primitive_class':    'systemd'
    'primitive_type':     'haproxy'
    'operations':
      'monitor':          { 'interval': '5s', 'timeout': '20s' }
      'start':            { 'interval': '0s', 'timeout': '20s' }
      'stop':             { 'interval': '0s', 'timeout': '20s' }

profile::highavailability::corosync::locations:
  'pubip_location1':
    primitive:  'pubip1'
    node_name:  "%hiera('corosync_cluster_node1')"
    score:      'INFINITY'
  'pubip_location2':
    primitive:  'pubip2'
    node_name:  "%hiera('corosync_cluster_node2')"
    score:      'INFINITY'
  'uibip_location1':
    primitive:  'uibip1'
    node_name:  "%hiera('corosync_cluster_node1')"
    score:      'INFINITY'
  'uibip_location2':
    primitive:  'uibip2'
    node_name:  "%hiera('corosync_cluster_node2')"
    score:      'INFINITY'

profile::highavailability::corosync::colocations:
  'pubip1_haproxy':
    primitives:   ['clone_haproxy', 'pubip1']
  'pubip2_haproxy':
    primitives:   ['clone_haproxy', 'pubip2']
  'uibip1_haproxy':
    primitives:   ['clone_haproxy', 'uibip1']
  'uibip2_haproxy':
    primitives:   ['clone_haproxy', 'uibip2']
